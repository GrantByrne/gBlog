@page "/admin/EditPost/{PostId:long}"
@using Blog.Web.Pages.Shared
@using Blog.Web.Database
@using Blog.Web.Models
@layout AdminLayout

<h3>Create a New Post</h3>

<EditForm Model="@_post" OnValidSubmit="Save">
    <FluentValidationValidator/>
    <ValidationSummary/>
    
    <div class="form-group">
        <label for="title">Title</label>
        <input type="text" class="form-control" id="title" @bind="_post.Title"/>
    </div>
    <div class="form-group">
        <label for="publish-date-time">Publish Date Time</label>
        <input type="datetime-local" class="form-control" id="publish-date-time" @bind="_post.Created"/>
    </div>
    <div class="form-group mt-3">
        <label for="post-body">Post Body</label>
        <textarea class="form-control" id="post-body" rows="10" @bind="_post.Content"></textarea>
    </div>
    <div class="form-group mt-3">
        <button class="btn btn-primary float-end" type="submit">Save</button>
    </div>
</EditForm>

@code {

    private Post _post = new()
    {
        Created = DateTime.Now
    };

    [Inject]
    public BlogDbContext DbContext { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ILogger<EditPost> Logger { get; set; } = null!;
    
    [Parameter]
    public long PostId { get; set; }

    protected override void OnInitialized()
    {
        if (PostId != 0)
        {
            var post = DbContext.Posts.First(p => p.Id == PostId);
            _post = post;
        }
    }

    public void Save()
    {
        try
        {
            
            DbContext.Posts.Update(_post);
            DbContext.SaveChanges();

            NavigationManager.NavigateTo("/admin/posts");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update post {PostId}", PostId);
        }
    }

}